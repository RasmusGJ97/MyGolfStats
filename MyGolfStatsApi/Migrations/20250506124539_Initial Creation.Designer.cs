// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGolfStatsApi.Db.AppDbContext;

#nullable disable

namespace MyGolfStatsApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506124539_Initial Creation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CourseRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Tees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Hole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BruttoScore")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("HolesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("NettoScore")
                        .HasColumnType("int");

                    b.Property<string>("Tee")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Bag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatBirdie")
                        .HasColumnType("bit");

                    b.Property<bool>("StatEagle")
                        .HasColumnType("bit");

                    b.Property<bool>("StatFiR")
                        .HasColumnType("bit");

                    b.Property<bool>("StatGiR")
                        .HasColumnType("bit");

                    b.Property<bool>("StatLostBalls")
                        .HasColumnType("bit");

                    b.Property<bool>("StatPenaltyCause")
                        .HasColumnType("bit");

                    b.Property<bool>("StatPenaltyStrokes")
                        .HasColumnType("bit");

                    b.Property<bool>("StatPutts")
                        .HasColumnType("bit");

                    b.Property<bool>("StatSandSave")
                        .HasColumnType("bit");

                    b.Property<bool>("StatUpAndDown")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Birdie")
                        .HasColumnType("bit");

                    b.Property<bool?>("Eagle")
                        .HasColumnType("bit");

                    b.Property<bool?>("FiR")
                        .HasColumnType("bit");

                    b.Property<bool?>("GiR")
                        .HasColumnType("bit");

                    b.Property<int>("HoleId")
                        .HasColumnType("int");

                    b.Property<int?>("LostBalls")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("PenaltyCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PenaltyStrokes")
                        .HasColumnType("int");

                    b.Property<int?>("Putts")
                        .HasColumnType("int");

                    b.Property<bool?>("SandSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpAndDown")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GolfId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("Hcp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Hole", b =>
                {
                    b.HasOne("MyGolfStatsApi.Db.Models.Course", "Course")
                        .WithMany("Holes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Round", b =>
                {
                    b.HasOne("MyGolfStatsApi.Db.Models.User", "User")
                        .WithMany("Rounds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Settings", b =>
                {
                    b.HasOne("MyGolfStatsApi.Db.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("MyGolfStatsApi.Db.Models.Settings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Statistics", b =>
                {
                    b.HasOne("MyGolfStatsApi.Db.Models.Hole", "Hole")
                        .WithMany()
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGolfStatsApi.Db.Models.User", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.Course", b =>
                {
                    b.Navigation("Holes");
                });

            modelBuilder.Entity("MyGolfStatsApi.Db.Models.User", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Statistics");
                });
#pragma warning restore 612, 618
        }
    }
}
